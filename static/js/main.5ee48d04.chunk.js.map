{"version":3,"sources":["images/me.jpg","components/NavBar/NavBar.jsx","components/RoundIMG/RoundIMG.jsx","components/Header/Header.jsx","components/ProjectCard/ProjectCard.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavBar","react_default","a","createElement","Navbar","bg","expand","Brand","href","className","Toggle","aria-controls","Collapse","id","Nav","Link","disabled","React","Component","RoundIMG","console","log","Me","Image","src","roundedCircle","Header","Jumbotron","fluid","components_RoundIMG_RoundIMG","class","ProjectCard","props","Card","style","width","Img","variant","img","Body","Title","name","Text","description","react_router_dom","to","ghLink","target","Button","Footer","App","projectComponents","projects","map","project","components_ProjectCard_ProjectCard","Fragment","components_NavBar_NavBar","components_Header_Header","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5ee48d04.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me.36ec3d7f.jpg\";","import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport \"./style.css\";\r\n\r\n\r\nclass NavBar extends React.Component {\r\n\r\n    render () {\r\n        return (\r\n\r\n    <Navbar bg=\"dark\" expand=\"lg\">\r\n        <Navbar.Brand href=\"#home\" className=\"name-logo\">jonDatz</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" className=\" navbar-dark\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav links\">\r\n            <Nav className=\"ml-auto\">\r\n            <Nav.Link href=\"#home\" className=\"link-text\" >Home</Nav.Link>\r\n            <Nav.Link disabled href=\"#link\" className=\"link-text disabled\" >Blog [Coming Soon]</Nav.Link>\r\n            </Nav>\r\n        </Navbar.Collapse>\r\n        </Navbar>            \r\n        )\r\n    }\r\n}\r\n\r\nexport default NavBar;","import React from \"react\";\r\nimport { Image } from \"react-bootstrap\";\r\nimport Me from \"../../images/me.jpg\";\r\nimport \"./style.css\";\r\n\r\nclass RoundIMG extends React.Component {\r\n\r\n    \r\n    render() {\r\n\r\n        console.log(Me);\r\n\r\n        return( \r\n            <Image src={Me} className=\"img-fluid border border-dark img-thumbnail me\" roundedCircle />\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default RoundIMG;","import React from \"react\";\r\nimport { Jumbotron, Button } from \"react-bootstrap\";\r\nimport RoundIMG from \"../RoundIMG/RoundIMG\";\r\nimport \"./style.css\";\r\n\r\nconst Header = () => {\r\n    return (\r\n      <Jumbotron fluid>\r\n        <div className=\" container\">\r\n          <div className=\"row\">\r\n\r\n            <div className=\"col-md-3 text-center\">\r\n                <RoundIMG />\r\n            </div>\r\n            <div className=\"col-md-9 \">\r\n            {/* <h1 className=\"head-text\" id=\"full-stack\"><span> FULL STACK </span></h1> */}\r\n            <div className=\"head-space\"> </div>\r\n            <h1 className=\"head-text\" id=\"web-dev\"><span> WEB DEVELOPER </span></h1>\r\n            <p className=\"header-p\">\r\n              Web developer with an eye for solving problems. I strive for clean, elegant design \r\n              <br /> while maintaining a strong focus on functionality.   \r\n            </p>\r\n            <p className=\"icons\">\r\n              <i class=\"fab fa-react fa-2x react\"></i>\r\n              <i class=\"fab fa-node fa-2x node\"></i>\r\n              <i class=\"fab fa-js fa-2x js\"></i>\r\n              <i class=\"fab fa-bootstrap fa-2x bootstrap\"></i>\r\n              \r\n            </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Jumbotron>\r\n    );\r\n  \r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport { Card, Button } from \"react-bootstrap\";\r\nimport \"./style.css\";\r\n\r\nconst ProjectCard = props => {\r\n  return (\r\n    <Card style={{ width: \"18rem\" }}>\r\n      <Card.Img\r\n        variant=\"top\"\r\n        src={props.img}\r\n      />\r\n      <Card.Body>\r\n        <Card.Title>{props.name}</Card.Title>\r\n        <Card.Text>{props.description}</Card.Text>\r\n        <div>\r\n          <Router>\r\n            <Link to={props.ghLink} target=\"_blank\">\r\n              <Button variant=\"light\" href={props.ghLink}>\r\n                <i class=\"fab fa-github-alt\" /> Github\r\n              </Button>\r\n            </Link>\r\n          </Router>\r\n        </div>\r\n      </Card.Body>\r\n      <Card.Footer className=\"card-tags\">#Example</Card.Footer>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ProjectCard;\r\n","import React from 'react';\nimport './App.css';\nimport NavBar from \"./components/NavBar/NavBar\";\nimport Header from \"./components/Header/Header\";\nimport ProjectCard from './components/ProjectCard/ProjectCard';\nimport projects from \"./projects.json\";\n\nfunction App() {\n\n  const projectComponents = projects.map(project => <ProjectCard name={project.name} description={project.description} ghLink={project.ghLink} />)\n\n  return (\n    <React.Fragment>\n      <NavBar />\n        <Header />\n      <div className=\"row body\">\n        {projectComponents}    \n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}