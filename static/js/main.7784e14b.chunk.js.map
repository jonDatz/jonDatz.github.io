{"version":3,"sources":["components/NavBar/NavBar.jsx","components/Header/Header.jsx","components/Button/Button.jsx","components/ProjectCard/ProjectCard.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","React","Component","Header","Jumbotron","Button","variant","LightButton","class","ProjectCard","Card","style","width","Img","src","Body","Title","Text","Button_Button","Footer","App","Fragment","components_NavBar_NavBar","components_Header_Header","components_ProjectCard_ProjectCard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mUAyBeA,0LAjBP,OAEAC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MAC1BL,EAAAC,EAAAC,cAACC,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,WACAP,EAAAC,EAAAC,cAACC,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7BT,EAAAC,EAAAC,cAACC,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAChBX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAKC,UAAU,WACfb,EAAAC,EAAAC,cAACU,EAAA,EAAIE,KAAL,CAAUP,KAAK,SAAf,QACAP,EAAAC,EAAAC,cAACU,EAAA,EAAIE,KAAL,CAAUP,KAAK,SAAf,kBAXSQ,IAAMC,4BCiBZC,0LAhBP,OAEAjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACIlB,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,2IAIAF,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAQC,QAAQ,WAAhB,uBAXKL,IAAMC,oBCOZK,EAPK,WAEhB,OACIrB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAQC,QAAQ,SAAQpB,EAAAC,EAAAC,cAAA,KAAGoB,MAAM,sBAAjC,YCwBOC,mLAvBP,OAEIvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UAClB1B,EAAAC,EAAAC,cAACsB,EAAA,EAAKG,IAAN,CAAUP,QAAQ,MAAMQ,IAAI,2DAC5B5B,EAAAC,EAAAC,cAACsB,EAAA,EAAKK,KAAN,KACI7B,EAAAC,EAAAC,cAACsB,EAAA,EAAKM,MAAN,mBACA9B,EAAAC,EAAAC,cAACsB,EAAA,EAAKO,KAAN,uGAIA/B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC8B,EAAD,QAGRhC,EAAAC,EAAAC,cAACsB,EAAA,EAAKS,OAAN,CAAapB,UAAU,kBAAvB,oBAjBUE,IAAMC,WCajBkB,MAZf,WACE,OACElC,EAAAC,EAAAC,cAACF,EAAAC,EAAMkC,SAAP,KACEnC,EAAAC,EAAAC,cAACkC,EAAD,MACApC,EAAAC,EAAAC,cAAA,OAAKW,UAAU,QACbb,EAAAC,EAAAC,cAACmC,EAAD,MACArC,EAAAC,EAAAC,cAACoC,EAAD,SCAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7784e14b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport \"./style.css\";\r\n\r\n\r\nclass NavBar extends React.Component {\r\n\r\n    render () {\r\n        return (\r\n\r\n        <Navbar bg=\"light\" expand=\"lg\">\r\n        <Navbar.Brand href=\"#home\">jonDatz</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"ml-auto\">\r\n            <Nav.Link href=\"#home\">Home</Nav.Link>\r\n            <Nav.Link href=\"#link\">Blog</Nav.Link>\r\n            </Nav>\r\n\r\n        </Navbar.Collapse>\r\n        </Navbar>            \r\n        )\r\n    }\r\n}\r\n\r\nexport default NavBar;","import React from \"react\";\r\nimport { Jumbotron, Button } from 'react-bootstrap';\r\nimport \"./style.css\";\r\n\r\nclass Header extends React.Component {\r\n    render () {\r\n        return(\r\n\r\n        <Jumbotron>\r\n            <h1>Hello, world!</h1>\r\n            <p>\r\n                This is a simple hero unit, a simple jumbotron-style component for calling\r\n                extra attention to featured content or information.\r\n            </p>\r\n            <p>\r\n                <Button variant=\"primary\">Learn more</Button>\r\n            </p>\r\n        </Jumbotron>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\n\r\nconst LightButton = () => {\r\n\r\n    return (\r\n        <Button variant=\"light\"><i class=\"fab fa-github-alt\"></i> Github</Button>\r\n    )\r\n}\r\n\r\nexport default LightButton;","import React from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport LightButton from \"../Button/Button\";\r\n\r\n\r\nclass ProjectCard extends React.Component {\r\n\r\n    render () {\r\n        return (\r\n\r\n            <Card style={{ width: '18rem' }}>\r\n                <Card.Img variant=\"top\" src=\"https://via.placeholder.com/250x150?text=Project+Image\" />\r\n                <Card.Body>\r\n                    <Card.Title>Card Title</Card.Title>\r\n                    <Card.Text>\r\n                    Some quick example text to build on the card title and make up the bulk of\r\n                    the card's content.\r\n                    </Card.Text>\r\n                    <div>\r\n                        <LightButton />                   \r\n                    </div>\r\n                </Card.Body>\r\n                <Card.Footer className=\"card-subtitles\">#Example</Card.Footer>\r\n            </Card>\r\n\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default ProjectCard;","import React from 'react';\nimport './App.css';\nimport NavBar from \"./components/NavBar/NavBar\";\nimport Header from \"./components/Header/Header\";\nimport ProjectCard from './components/ProjectCard/ProjectCard';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <NavBar />\n      <div className=\"body\">\n        <Header />\n        <ProjectCard />      \n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}